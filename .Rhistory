print x
print(x)
x <- 4L
print attributes(x)
print attributes
attributes(x)
library(datasets)
data(iris)
?iris
mean(iris)
View(iris)
s<- split(iris, iris$species)
head(iris)
s<- split(iris, iris$Species)
lapply(s, function(x), colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
view(mtcars)
View(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls()
omatrix<- matrix(c(1,2,3,4), nrow=2, ncol=2)
omatrix
imatrix<- solve(omatrix)
imatrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m<- solve(data,...)
x$setsolve(m)
m
}
source("cachematrix.R")
setwd("~/Documents/Datasciencecoursera/ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getsolve()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getinverse = getinverse)
}
amatrix$getinverse
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setsolve = setsolve,
getinverse = getinverse)
}
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
amatrix$set(matrix(c(0,1,1,1), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getsolve()
cacheSolve(amatrix)
